---
import SectionHeading from './SectionHeading.astro';

const messageTemplate = `Hi there, hope you're having a great day!`;
---

<div class="max-w-screen-xl mx-auto px-12 py-12 md:py-32">
	<SectionHeading title="Contact" />
	<div class="w-[100%] mt-10 mx-auto md:w-[80%]">
		<form>
			<div>
				<label for="email" class="block mb-2 text-sm font-medium text-text-primary"
					>Your email</label
				>
				<input
					type="email"
					id="email"
					name="email"
					class="border border-border text-text-secondary text-sm rounded-lg block w-full p-2.5"
					placeholder="name@name.com"
					required
				/>
			</div>
			<div class="mt-4">
				<label for="subject" class="block mb-2 text-sm font-medium text-text-primary">Subject</label
				>
				<input
					name="subject"
					type="text"
					id="subject"
					class="border border-border text-text-secondary text-sm rounded-lg block w-full p-2.5"
					placeholder="Optional Subject"
				/>
			</div>
			<div class="sm:col-span-2 mt-4">
				<label for="message" class="block mb-2 text-sm font-medium text-text-primary"
					>Your message</label
				>
				<textarea
					required
					id="message"
					name="message"
					rows="6"
					class="border border-border text-text-secondary text-sm rounded-lg block w-full p-2.5"
					placeholder="Say Hi..."></textarea>
			</div>
			<button
				type="submit"
				class="py-3 px-5 mt-4 font-medium text-center text-text-on-accent rounded-lg
        bg-accent-primary hover:bg-accent-primary/70 sm:w-fit"
				>Send message</button
			>
		</form>
	</div>
</div>

<!-- Template Modal -->
<dialog data-template-modal>
	<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
		<div class="bg-background p-6 rounded-lg max-w-lg w-full mx-4">
			<div class="p-4 rounded mb-4 whitespace-pre-line" data-message></div>
			<div class="flex justify-end gap-4">
				<button
					data-close-modal
					class="border border-border rounded px-4 py-2 text-text-primary hover:text-text-primary/60"
					>Close</button
				>
				<button
					data-use-template
					class="px-4 py-2 bg-accent-primary text-text-on-accent rounded hover:bg-accent-primary/70">
					Use Template
				</button>
			</div>
		</div>
	</div>
</dialog>

<script define:vars={{ messageTemplate }}>
	document.addEventListener('DOMContentLoaded', () => {
		const templateModal = document.querySelector('[data-template-modal]');

		document.querySelector('form').addEventListener('submit', submitForm);

		document.querySelector('[data-close-modal]').addEventListener('click', () => {
			templateModal.close();
		});

		document.querySelector('[data-use-template]').addEventListener('click', () => {
			document.getElementById('message').value = messageTemplate;
			templateModal.close();
		});

		function showCustomDialog(message, showTemplate = false) {
			const useTemplateBtn = templateModal.querySelector('[data-use-template]');
			const messageBox = document.querySelector('[data-message]');

			messageBox.textContent = message;
			useTemplateBtn.style.display = showTemplate ? 'block' : 'none';

			templateModal.showModal();
		}

		async function submitForm(event) {
			event.preventDefault();

			const message = document.getElementById('message').value;

			if (!isValidMessage(message)) {
				showCustomDialog(
					`Hi, SusomGPT ðŸ¤– here! It looks like your message got a bit scrambled! ðŸ¤”
            How about trying this: '${messageTemplate}' ðŸ˜„`,
					true
				);
				return;
			}

			const form = event.target;
			const formData = new FormData(form);

			try {
				const response = await fetch('https://formspree.io/f/xlekkqqk', {
					method: 'POST',
					body: formData,
					headers: {
						Accept: 'application/json',
					},
				});

				if (response.ok) {
					showCustomDialog('Message sent successfully! ðŸŽ‰');
					form.reset();
				} else {
					const errorData = await response.json();
					showCustomDialog('There was an error sending your message. Please try again. ðŸ˜•');
					console.error('Formspree error:', errorData);
				}
			} catch (error) {
				window.showCustomDialog(
					'There was a problem sending your message. Please check your connection and try again. ðŸ˜”'
				);
				console.error('Submission error:', error);
			}
		}

		function isValidMessage(message) {
			const text = message.toLowerCase().trim();
			if (text.length < 2) return false;

			// Enhanced invalid patterns to catch more random strings
			const invalidPatterns =
				/(.)\1{2,}|(?:qwer|asdf|zxcv|hjkl|blkj|jkl)|[!@#$%^&*]{2,}|[^a-z\s]{2,}/i;
			if (invalidPatterns.test(text)) return false;

			// Stricter consonant sequence check
			const consecutiveConsonants = /[bcdfghjklmnpqrstvwxz]{4,}/i;
			if (consecutiveConsonants.test(text)) return false;

			// Use Set for faster lookups
			const commonWords = new Set([
				'hi',
				'hello',
				'hey',
				'the',
				'is',
				'are',
				'was',
				'how',
				'who',
				'why',
				'you',
				'i',
				'we',
				'my',
				'of',
				'and',
				'a',
				'to',
				'in',
				'is',
				'you',
				'it',
				'he',
				'for',
				'was',
				'on',
				'are',
				'as',
				'his',
				'at',
				'be',
				'the',
				'of',
				'and',
				'a',
				'to',
				'in',
				'is',
				'you',
				'that',
				'it',
				'he',
				'for',
				'was',
				'on',
				'are',
				'as',
				'with',
				'his',
				'they',
				'at',
				'be',
				'this',
				'from',
				'I',
				'have',
				'or',
				'by',
				'one',
				'had',
				'not',
				'but',
				'what',
				'all',
				'were',
				'when',
				'we',
				'there',
				'can',
				'an',
				'your',
				'which',
				'their',
				'said',
				'if',
				'do',
				'will',
				'each',
				'about',
				'how',
				'up',
				'out',
				'them',
				'then',
				'she',
				'many',
				'some',
				'so',
				'these',
				'would',
				'other',
				'into',
				'has',
				'more',
				'her',
				'two',
				'like',
				'him',
				'see',
				'time',
				'could',
				'no',
				'make',
				'than',
				'first',

				'been',
				'its',
				'who',
				'now',
				'people',
				'my',
				'made',
				'over',
				'did',
				'down',
				'only',
				'way',
				'find',
				'use',
				'may',
				'water',
				'long',
				'little',
				'very',
				'after',
				'words',
				'called',
				'just',
				'where',
				'most',
				'know',
				'greeting',
				'greetings',
				'howdy',
				'hiya',
				'morning',
				'afternoon',
				'evening',
				'night',
				'sup',
				'yo',
			]);

			// Stricter character ratio checks
			const counts = {
				consonants: (text.match(/[bcdfghjklmnpqrstvwxz]/g) || []).length,
				vowels: (text.match(/[aeiou]/g) || []).length,
				nonAlpha: (text.match(/[^a-z\s]/g) || []).length,
				alpha: (text.match(/[a-z]/g) || []).length,
			};

			if (counts.consonants > 0 && counts.vowels === 0) return false;
			if (counts.consonants / (counts.vowels || 1) > 3) return false;

			const words = text.split(/\s+/);
			return words.some((word) => commonWords.has(word));
		}
	});
</script>
